{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/Row.js","components/Table.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Example","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","Foot","Card","CardFooter","Row","id","firstName","lastName","username","cityName","scope","ExampleCard","results","CardImg","top","width","src","alt","CardBody","CardTitle","Table","dark","map","obj","i","key","login","uuid","location","street","number","name","first","last","city","Search","value","search","onChange","handleInputChange","type","placeholder","sortOnClick","App","setSearch","setResults","filteredArray","setFilteredArray","useEffect","axios","get","then","res","data","filter","console","log","toLowerCase","includes","event","target","sorted","state","employees","sort","a","b","setState","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f182f883.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from \"reactstrap\";\n\nconst Example = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">My Directory</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"#employees\">Employees</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"https://github.com/jakevs\">Personal</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Search\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>Filter!</DropdownItem>\n                <DropdownItem>Sort!</DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>Reset</DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n          <NavbarText>Developed by JVSIII</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Example;\n","import React from \"react\";\nimport { Card, CardFooter } from \"reactstrap\";\n\nconst Foot = (props) => {\n  return (\n    <div>\n      <Card>\n        <CardFooter className=\"text-muted\">JVSIII</CardFooter>\n      </Card>\n    </div>\n  );\n};\n\nexport default Foot;\n","import React from \"react\";\n\nconst Row = (props) => {\n  const { id, firstName, lastName, username, cityName } = props;\n  return (\n    <tr>\n      <th scope=\"row\">{id}</th>\n      <td>{firstName}</td>\n      <td>{lastName}</td>\n      <td>{username}</td>\n      <td>{cityName}</td>\n    </tr>\n  );\n};\n\nexport default Row;\n","import React from \"react\";\nimport Row from \"./Row\";\n// import getEmployees from \"../utils/Api\";\nimport { Card, CardImg, CardBody, CardTitle, Table } from \"reactstrap\";\n\nconst ExampleCard = ({ results }) => {\n  return (\n    <div>\n      <Card>\n        <CardImg\n          top\n          width=\"100%\"\n          src=\"https://cdn.iveybusinessjournal.com/wp-content/uploads/2006/03/iStock_000012204568_Large.jpg\"\n          alt=\"Card image cap\"\n        />\n        <CardBody>\n          <CardTitle id=\"employees\">Employee Directory</CardTitle>\n          <Table dark>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>First Name</th>\n                <th>Last Name</th>\n                <th>Username</th>\n                <th>City</th>\n              </tr>\n            </thead>\n            <tbody>\n              {results &&\n                results.map((obj, i) => {\n                  return (\n                    <Row\n                      key={obj.login.uuid}\n                      id={obj.location.street.number}\n                      firstName={obj.name.first}\n                      lastName={obj.name.last}\n                      username={obj.login.username}\n                      cityName={obj.location.city}\n                    />\n                  );\n                })}\n            </tbody>\n          </Table>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default ExampleCard;\n","import React from \"react\";\n\nexport default function Search(props) {\n  return (\n    <div>\n      <form className=\"form-inline\">\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          className=\"form-control\"\n          type=\"text\"\n          placeholder=\"Type Here!\"\n        />\n      </form>\n      <button\n        className=\"btn\"\n        type=\"button\"\n        id=\"sortBtn\"\n        onClick={() => props.sortOnClick}\n      >\n        Search\n      </button>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Example from \"./components/Navbar\";\nimport Foot from \"./components/Footer\";\nimport ExampleCard from \"./components/Table\";\nimport Search from \"./components/Search\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [filteredArray, setFilteredArray] = useState([]);\n\n  //sortfunction\n  const handleInputChange = (event) => {\n    const value = event.target.value;\n    setSearch(value);\n  };\n\n  const sortOnClick = () => {\n    const sorted = this.state.employees.sort((a, b) =>\n      a.name.last > b.name.last ? 1 : b.name.last > a.name.last ? -1 : 0\n    );\n    this.setState({ employees: sorted });\n  };\n\n  useEffect(() => {\n    axios.get(\"https://randomuser.me/api/?results=10\").then((res) => {\n      let results = res.data.results;\n      setResults(results);\n      setFilteredArray(results);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!results) {\n      return;\n    }\n    const filteredArray = results.filter((obj) => {\n      console.log(obj.name.first);\n      return obj.name.first.toLowerCase().includes(search.toLowerCase());\n    });\n    if (search === \"\") {\n      setFilteredArray(results);\n    } else {\n      setFilteredArray(filteredArray);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [search]);\n\n  return (\n    <div className=\"App\">\n      <Example />\n      <ExampleCard results={filteredArray} />\n      <Search\n        handleInputChange={handleInputChange}\n        search={search}\n        sortOnClick={sortOnClick}\n      />\n      <Foot />\n    </div>\n  );\n}\n\n// export default Example;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}